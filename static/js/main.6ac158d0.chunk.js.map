{"version":3,"sources":["App.js","index.js"],"names":["Div","styled","div","display","flexDirection","justifyContent","fontFamily","textAlign","maxWidth","background","border","Row","props","jc","Column","flexWrap","Header","header","padding","fontSize","color","Button","button","bg","Input","input","outline","borderRadius","minWidth","borderColor","List","li","listStyleType","Text","textDecorationLine","opacity","Todos","React","useState","id","uuidv4","text","completed","todos","setTodos","setText","useEffect","parsedTodos","JSON","parse","localStorage","getItem","setItem","stringify","onRemove","event","theState","theEntryIndex","findIndex","x","splice","preventDefault","onToggleComplete","theEntry","find","target","CreateTodo","onCreate","split","join","prevState","onChange","value","map","todo","Todo","type","checked","onClick","onSubmit","placeholder","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6ac158d0.chunk.js","sourcesContent":["/**\r\n *\r\n * Welcome to the Student frontend developer challenge!\r\n *\r\n * Your task is to complete a simple Todo app in React. I've left in some partial code\r\n * for you to get started on.\r\n *\r\n * Once finished, users should be able to do the following:\r\n *\r\n * 1. \"Add a todo\". Todo is added, when the user types in a text for the todo in the form\r\n * and presses the \"Add\" button. Users should not be able to add empty todos. Text field\r\n * should be cleared once a todo is added. Te added todo should show up at the top of the Todo list.\r\n *\r\n * 2. \"Show todos\". The user should be able to see all added todos.\r\n *\r\n * 3. \"Complete a todo\". When user clicks a checkbox next to the todo, the \"complete\" state\r\n * of that Todo should toggle to the opposite value and that state should be reflected in the checkbox\r\n * i.e. if \"complete\" is true, checkbox is \"checked\", else it is \"unchecked\".\r\n *\r\n * 4. \"Remove a todo\". Once \"Remove\" button is clicked, the given todo should be removed\r\n * from the state and also disappear from the todo list.\r\n *\r\n * 5. The app should be styled, preferably using https://emotion.sh/, however, any styling\r\n * approach is acceptable.\r\n *\r\n * Note: As much as possible, please try to keep the given boiler plate code so that you can\r\n * showcase your ability to work with given parameters.\r\n *\r\n */\r\nimport React from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport styled from \"@emotion/styled\";\r\n\r\n// Styles for Todo list\r\n\r\nconst Div = styled.div({\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  justifyContent: \"center\",\r\n  fontFamily: \"sans-serif\",\r\n  textAlign: \"center\",\r\n  maxWidth: \"500px\",\r\n  background: \"#b2d5ff\",\r\n  border: \"solid 2px\"\r\n});\r\n\r\nconst Row = styled.div(\r\n  {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"center\"\r\n  },\r\n  (props) => ({\r\n    justifyContent: props.jc\r\n  })\r\n);\r\n\r\nconst Column = styled.div({\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  flexWrap: \"wrap\"\r\n});\r\n\r\nconst Header = styled.header({\r\n  fontFamily: \"Arial\",\r\n  padding: 10,\r\n  fontSize: 26,\r\n  background: \"#007ed3\",\r\n  color: \"white\"\r\n});\r\n\r\nconst Button = styled.button(\r\n  (props) => ({\r\n    background: props.bg\r\n  }),\r\n  {\r\n    color: \"black\",\r\n    \"&:hover\": {\r\n      color: \"white\"\r\n    }\r\n  }\r\n);\r\n\r\nconst Input = styled.input({\r\n  outline: 0,\r\n  padding: 0.6,\r\n  border: \"1px solid rgba(34, 36, 38, 0.15)\",\r\n  borderRadius: 3,\r\n  minWidth: 180,\r\n  \"&:hover,&:focus\": {\r\n    borderColor: \"#85b7d9\"\r\n  }\r\n});\r\n\r\nconst List = styled.li({\r\n  listStyleType: \"none\"\r\n});\r\n\r\nconst Text = styled.div({\r\n  textDecorationLine: \"line-through\",\r\n  opacity: \"0.5\"\r\n});\r\n\r\n/**Code*/\r\n\r\nfunction Todos() {\r\n  const [todos, setTodos] = React.useState([\r\n    {\r\n      id: uuidv4(),\r\n      text: \"Complete assignment\",\r\n      completed: false\r\n    },\r\n    {\r\n      id: uuidv4(),\r\n      text: \"Go for a walk\",\r\n      completed: false\r\n    },\r\n    {\r\n      id: uuidv4(),\r\n      text: \"Get the job\",\r\n      completed: false\r\n    }\r\n  ]);\r\n  const [text, setText] = React.useState(\"\");\r\n\r\n  \r\n  React.useEffect(() => {\r\n    const parsedTodos = JSON.parse(localStorage.getItem(\"todos\"));\r\n    setTodos(parsedTodos);\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\r\n  }, [todos]);\r\n\r\n  const onCreate = (event) => {\r\n    const trimmedText = text.split(\" \").join(\"\");\r\n    if (trimmedText === \"\") {\r\n      event.preventDefault();\r\n      return;\r\n    }\r\n\r\n    setTodos((prevState) => [\r\n      {\r\n        id: uuidv4(),\r\n        text: text,\r\n        completed: false\r\n      },\r\n      ...prevState\r\n    ]);\r\n    setText(\"\");\r\n    event.preventDefault();\r\n  };\r\n\r\n  const onRemove = (event, id) => {\r\n    const theState = [...todos];\r\n    const theEntryIndex = theState.findIndex((x) => x.id === id);\r\n\r\n    theState.splice(theEntryIndex, 1);\r\n    setTodos(theState);\r\n    event.preventDefault();\r\n  };\r\n\r\n  const onChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const onToggleComplete = (event) => {\r\n    const theState = [...todos];\r\n    const theEntry = theState.find((x) => x.id === event.target.id);\r\n    const theEntryIndex = theState.findIndex((x) => x.id === event.target.id);\r\n\r\n    theEntry.completed = !theEntry.completed;\r\n    theState[theEntryIndex] = theEntry;\r\n    setTodos(theState);\r\n  };\r\n\r\n  return (\r\n    <main>\r\n      {/** Show your \"Create todo\" form here */}\r\n      <CreateTodo onCreate={onCreate} onChange={onChange} text={text} />\r\n      <ul>\r\n        {/** Ouput some todos here */}\r\n        {todos.map((todo) => (\r\n          <Todo\r\n            key={todo.id}\r\n            id={todo.id}\r\n            text={todo.text}\r\n            completed={todo.completed}\r\n            onToggleComplete={onToggleComplete}\r\n            onRemove={onRemove}\r\n          ></Todo>\r\n        ))}\r\n      </ul>\r\n    </main>\r\n  );\r\n}\r\n\r\nfunction Todo({ id, text, completed, onRemove, onToggleComplete }) {\r\n  return (\r\n    <List>\r\n      <Row jc=\"flex-end\">\r\n        {completed && (\r\n          <Column>\r\n            <Text>{text}</Text>\r\n          </Column>\r\n        )}\r\n        {!completed && <Column>{text}</Column>}\r\n\r\n        <Column>\r\n          <Row jc=\"center\">\r\n            <input\r\n              id={id}\r\n              type=\"checkbox\"\r\n              checked={completed}\r\n              onChange={onToggleComplete}\r\n            />\r\n            <Button\r\n              type=\"button\"\r\n              onClick={(event) => onRemove(event, id)}\r\n              bg=\"#d9534f\"\r\n            >\r\n              Remove\r\n            </Button>\r\n          </Row>\r\n        </Column>\r\n      </Row>\r\n    </List>\r\n  );\r\n}\r\n\r\nfunction CreateTodo({ onCreate, onChange, text }) {\r\n  return (\r\n    <form onSubmit={onCreate}>\r\n      {/** Implement the form */}\r\n\r\n      <Input\r\n        type=\"text\"\r\n        value={text}\r\n        onChange={onChange}\r\n        placeholder=\"Create todo\"\r\n      />\r\n      <Button type=\"submit\" onSubmit={onCreate} bg=\"#5cb85c\">\r\n        Add\r\n      </Button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default function App() {\r\n  return (\r\n    <Row jc=\"center\">\r\n      <Div>\r\n        <Header>Todo List</Header>\r\n        <Todos />\r\n      </Div>\r\n    </Row>\r\n  );\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}