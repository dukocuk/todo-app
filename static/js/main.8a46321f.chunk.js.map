{"version":3,"sources":["App.js","index.js"],"names":["Div","styled","div","display","flexDirection","justifyContent","fontFamily","textAlign","maxWidth","background","border","Row","props","jc","Column","flexWrap","Header","header","padding","fontSize","color","Button","button","bg","Input","input","outline","borderRadius","minWidth","borderColor","List","li","listStyleType","Todos","React","useState","id","uuidv4","text","completed","todos","setTodos","setText","useEffect","parsedTodos","JSON","parse","localStorage","getItem","console","log","setItem","stringify","onRemove","event","theState","theEntryIndex","findIndex","x","splice","preventDefault","onToggleComplete","theEntry","find","target","CreateTodo","onCreate","split","join","prevState","onChange","value","map","todo","Todo","type","checked","onClick","onSubmit","placeholder","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8a46321f.chunk.js","sourcesContent":["/**\n *\n * Welcome to the Student frontend developer challenge!\n *\n * Your task is to complete a simple Todo app in React. I've left in some partial code\n * for you to get started on.\n *\n * Once finished, users should be able to do the following:\n *\n * 1. \"Add a todo\". Todo is added, when the user types in a text for the todo in the form\n * and presses the \"Add\" button. Users should not be able to add empty todos. Text field\n * should be cleared once a todo is added. Te added todo should show up at the top of the Todo list.\n *\n * 2. \"Show todos\". The user should be able to see all added todos.\n *\n * 3. \"Complete a todo\". When user clicks a checkbox next to the todo, the \"complete\" state\n * of that Todo should toggle to the opposite value and that state should be reflected in the checkbox\n * i.e. if \"complete\" is true, checkbox is \"checked\", else it is \"unchecked\".\n *\n * 4. \"Remove a todo\". Once \"Remove\" button is clicked, the given todo should be removed\n * from the state and also disappear from the todo list.\n *\n * 5. The app should be styled, preferably using https://emotion.sh/, however, any styling\n * approach is acceptable.\n *\n * Note: As much as possible, please try to keep the given boiler plate code so that you can\n * showcase your ability to work with given parameters.\n *\n */\nimport React from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport styled from '@emotion/styled'\n\n// Styles for Todo list\n\nconst Div = styled.div({\n  display: 'flex',\n  flexDirection: 'column',\n  justifyContent: 'center',\n  fontFamily: 'sans-serif',\n  textAlign: 'center',\n  maxWidth: '500px',\n  background: '#b2d5ff',\n  border: 'solid 2px',\n})\n\nconst Row = styled.div(\n  {\n  display: 'flex',\n  flexDirection: 'row',\n  justifyContent: 'center'\n  },\n  props => ({\n  justifyContent: props.jc\n  })\n)\n\nconst Column = styled.div({\n  display: 'flex',\n  flexDirection: 'column',\n  flexWrap: 'wrap',\n})\n\nconst Header = styled.header({\n  fontFamily: 'Arial',\n  padding: 10,\n  fontSize: 26,\n  background: '#007ed3',\n  color: 'white',\n})\n\nconst Button = styled.button(\n  props => ({\n    background: props.bg\n  }),\n  {\n    color: 'black',\n    '&:hover': {\n      color: 'white'\n    }\n  }\n)\n\nconst Input = styled.input({\n  outline: 0,\n  padding: 0.6,\n  border: '1px solid rgba(34, 36, 38, 0.15)',\n  borderRadius: 3,\n  minWidth: 180,\n  '&:hover,&:focus': {\n    borderColor: '#85b7d9'\n  },\n})\n\nconst List = styled.li({\n  listStyleType: 'none',\n})\n\n\n/**Code*/\n\nfunction Todos() {\n  const [todos, setTodos] = React.useState([\n    {\n      id: uuidv4(),\n      text: \"Complete assignment\",\n      completed: false\n    },\n    {\n      id: uuidv4(),\n      text: \"Go for a walk\",\n      completed: false\n    },\n    {\n      id: uuidv4(),\n      text: \"Get the job\",\n      completed: false\n    }\n  ]);\n  const [text, setText] = React.useState(\"\");\n\n  React.useEffect(() => {\n    const parsedTodos = JSON.parse(localStorage.getItem(\"todos\"))\n    console.log(typeof parsedTodos)\n    console.log(parsedTodos[0])\n    setTodos(parsedTodos)\n  }, [])\n\n  React.useEffect( () => {\n    localStorage.setItem(\"todos\", JSON.stringify(todos))\n  }, [todos])\n\n\n  const onCreate = event => {\n    const trimmedText = text.split(\" \").join(\"\")\n    if (trimmedText === \"\") {\n      event.preventDefault();\n      return\n    }\n\n    setTodos(prevState => ([\n      {\n        id: uuidv4(),\n        text: text,\n        completed: false\n      },\n      ...prevState\n    ]\n    ));\n    setText(\"\")\n    event.preventDefault();\n  };\n\n  const onRemove = (event, id) => {\n    const theState = [...todos];\n    const theEntryIndex = theState.findIndex(x => x.id === id)\n\n    theState.splice(theEntryIndex, 1)\n    setTodos(theState)\n    event.preventDefault();\n  }\n\n  const onChange = event => {\n    setText(event.target.value);\n  };\n\n  const onToggleComplete = (event) => {\n    const theState = [...todos];\n    const theEntry = theState.find(x => x.id === event.target.id)\n    const theEntryIndex = theState.findIndex(x => x.id === event.target.id)\n    \n    theEntry.completed = !theEntry.completed\n    theState[theEntryIndex] = theEntry\n    setTodos(theState)\n  };\n\n  return (\n    <main>\n      {/** Show your \"Create todo\" form here */}\n      <CreateTodo onCreate={onCreate} onChange={onChange} text={text}/>\n      <ul>\n        {/** Ouput some todos here */}\n        {todos.map(todo => <Todo key={todo.id} id={todo.id} text={todo.text} completed={todo.completed} onToggleComplete={onToggleComplete} onRemove={onRemove}></Todo>)}\n        \n      </ul>\n    </main>\n  );\n}\n\nfunction Todo({id, text, completed, onRemove, onToggleComplete }) {\n  return <List>\n          <Row jc='flex-end'>\n            <Column>\n              {text}\n            </Column>\n            <Column>\n              <Row jc='center'>\n                <input id={id} type=\"checkbox\" checked={completed} onChange={onToggleComplete}/>\n                <Button type=\"button\" onClick={(event)=>onRemove(event, id)} bg='#d9534f'>Remove</Button>\n              </Row>\n            </Column>\n          </Row>\n        </List>;\n}\n\nfunction CreateTodo({ onCreate, onChange, text }) {\n  return <form onSubmit={onCreate}>\n    {/** Implement the form */}\n    \n    <Input type=\"text\" value={text} onChange={onChange} placeholder=\"Create todo\"/>\n    <Button type=\"submit\" onSubmit={onCreate} bg='#5cb85c'>Add</Button>\n    </form>;\n}\n\nexport default function App() {\n  return (\n    <Row jc='center'>\n      <Div>\n        <Header>Todo List</Header>\n        <Todos />\n      </Div>\n    </Row>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}